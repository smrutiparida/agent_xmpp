#!/usr/bin/env ruby

####------------------------------------------------------------------------------------------------------
require 'rubygems'
require 'optparse'
require 'agent_xmpp'
begin
  require 'config/boot'
rescue LoadError
  AgentXmpp.logger.info "config/boot.rb not given"
end
  

####------------------------------------------------------------------------------------------------------
AgentXmpp.log_file = STDOUT
OptionParser.new do |opts|
  opts.banner = 'Usage: agent_xmpp.rb [options]'
  opts.separator ''
  opts.on('-p', '--path path', 'application path') {|p| AgentXmpp.app_path = p}
  opts.on('-f', '--file config.yml', 'YAML agent configuration file relative to application path') {|f| AgentXmpp.config_file = f}
  opts.on('-l', '--logfile file.log', 'name of logfile') {|f| AgentXmpp.log_file = f}
  opts.on_tail('-h', '--help', 'Show this message') {
    puts opts
    exit
  }
  opts.parse!(ARGV)
end

####------------------------------------------------------------------------------------------------------
AgentXmpp.log_file = File.join(AgentXmpp.app_path, AgentXmpp.log_file) if AgentXmpp.log_file.kind_of?(String)
AgentXmpp.config_file = File.join(AgentXmpp.AgentXmpp.config_file, AgentXmpp.config_file)
AgentXmpp.logger = Logger.new(AgentXmpp.log_file, 10, 1024000)
raise Exception, "Configuration file #{AgentXmpp.config_file} required." unless File.exist?(AgentXmpp.config_file) 

####------------------------------------------------------------------------------------------------------
AgentXmpp.logger.info "STARTING AgentXmpp"
AgentXmpp.logger.info "LOG FILE: #{AgentXmpp.log_file.kind_of?(String) ? AgentXmpp.log_file : "STDOUT"}"
AgentXmpp.logger.info "APPLICATION PATH: #{AgentXmpp.AgentXmpp.config_file}"
AgentXmpp.logger.info "CONFIGURATION FILE: #{AgentXmpp.config_file}"

####------------------------------------------------------------------------------------------------------
AgentXmpp::Boot.call_before_config_load if AgentXmpp::Boot.respond_to?(:call_before_config_load)

####------------------------------------------------------------------------------------------------------
AgentXmpp::Boot.load('config', {:exclude => ['config/boot'], :ordered_load => AgentXmpp::Boot.config_load_order})

####------------------------------------------------------------------------------------------------------
AgentXmpp::Boot.call_before_app_load if AgentXmpp::Boot.respond_to?(:call_before_app_load)

####------------------------------------------------------------------------------------------------------
AgentXmpp::Boot.load('app/models', {:ordered_load => AgentXmpp::Boot.app_load_order})
AgentXmpp::Boot.load('app/controllers')

####------------------------------------------------------------------------------------------------------
AgentXmpp::Boot.call_after_app_load if AgentXmpp::Boot.respond_to?(:call_after_app_load)

####------------------------------------------------------------------------------------------------------
AgentXmpp::Client.new(File.open(AgentXmpp.config_file) {|yf| YAML::load(yf)}).connect
