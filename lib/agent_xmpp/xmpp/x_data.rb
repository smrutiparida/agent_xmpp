# Original from XMPP4R - XMPP Library for Ruby Website::http://home.gna.org/xmpp4r/
##############################################################################################################
module AgentXmpp

  #####-------------------------------------------------------------------------------------------------------
  module Xmpp

    #####-------------------------------------------------------------------------------------------------------
    class XData < X

      #.....................................................................................................
      name_xmlns 'x', 'jabber:x:data'

      #.....................................................................................................
      def initialize(type=nil)
        super()
        self.type = type
      end

      #.....................................................................................................
      def field(var)
        elements { |xe|
          return xe if xe.kind_of?(XDataField) and xe.var == var
        }
        nil
      end

      #.....................................................................................................
      def fields(including_hidden=false)
        fields = []
        each_element do |xe|
          if xe.kind_of?(XDataField) and (including_hidden or (xe.type != :hidden and xe.type != :fixed))
            fields << xe
          end
        end
        fields
      end

      #.....................................................................................................
      def type
        attributes['type'].to_sym
      end

      #.....................................................................................................
      def type=(t)
        attributes['type'] = t.to_s
      end

      #.....................................................................................................
      def title
        first_element('title')
      end

      #.....................................................................................................
      def title=(title)
        delete_elements('title')
        add_element(XDataTitle.new(title))
      end

      #.....................................................................................................
      def instructions
        elements.inject('instructions', []) {|f, xe| f << xe}
      end

      #.....................................................................................................
      def instructions=(i)
        add(XDataInstructions.new(i))
      end

      #.....................................................................................................
      def add_field_with_value(var, value, type=nil)
        field = XDataField.new(var, type)
        field.values = value
        self << field
      end

    end

    #####-------------------------------------------------------------------------------------------------------
    class XDataTitle < Element

      #.....................................................................................................
      name_xmlns 'title', 'jabber:x:data'

      #.....................................................................................................
      def initialize(title=nil)
        super()
        add_text(title)
      end

      #.....................................................................................................
      def to_s
        text.to_s
      end

      #.....................................................................................................
      def title
        text
      end
      
    end

    #####-------------------------------------------------------------------------------------------------------
    class XDataInstructions < Element

      #.....................................................................................................
      name_xmlns 'instructions', 'jabber:x:data'

      #.....................................................................................................
      def initialize(instructions=nil)
        super()
        add_text(instructions)
      end

      #.....................................................................................................
      def to_s
        text.to_s
      end

      #.....................................................................................................
      def instructions
        text
      end
    end

    #####-------------------------------------------------------------------------------------------------------
    class XDataField < Element

      #.....................................................................................................
      name_xmlns 'field', 'jabber:x:data'

      #.....................................................................................................
      def initialize(var=nil, type=nil)
        super()
        self.var = var
        self.type = type if type
      end

      #.....................................................................................................
      def label
        attributes['label']
      end

      #.....................................................................................................
      def label=(s)
        attributes['label'] = s
      end

      #.....................................................................................................
      def var
        attributes['var']
      end

      #.....................................................................................................
      def var=(s)
        attributes['var'] = s
      end

      #.....................................................................................................
      def type
        attributes['type'].to_sym
      end

      #.....................................................................................................
      def type=(t)
        attributes['type'] = t.to_s
      end

      #.....................................................................................................
      def required?
        res = false
        each_element('required') { res = true }
        res
      end

      #.....................................................................................................
      def required=(r)
        delete_elements('required')
        if r
          add REXML::Element.new('required')
        end
      end

      #.....................................................................................................
      def values
        res = []
        each_element('value') { |e|
          res << e.text
        }
        res
      end

      #.....................................................................................................
      def values=(ary)
        delete_elements('value')
        ary.each {|v| add(REXML::Element.new('value')).text = v}
        self
      end

      #.....................................................................................................
      def value
        values.first
      end

      #.....................................................................................................
      def value=(val)
        self.values = [val]
      end
      #.....................................................................................................
      def options
        res = {}
        each_element('option') { |e|
          value = nil
          e.each_element('value') { |ve| value = ve.text }
          res[value] = e.attributes['label']
        }
        res
      end

      #.....................................................................................................
      def options=(hsh)
        delete_elements('option')
        hsh.each { |value,label|
          o = add(REXML::Element.new('option'))
          o.attributes['label'] = label
          o.add(REXML::Element.new('value')).text = value
        }
      end
    end

    #####-------------------------------------------------------------------------------------------------------
    class XDataReported < Element

      #.....................................................................................................
      name_xmlns 'reported', 'jabber:x:data'

      #.....................................................................................................
      def fields(including_hidden=false)
        fields = []
        each_element do |xe|
          if xe.kind_of?(AgentXmpp::Xmpp::XDataField) and (including_hidden or (xe.type != :hidden and xe.type != :fixed))
            fields << xe
          end
        end
        fields
      end

      #.....................................................................................................
      def add_field(var)
        self << XDataField.new(var)
      end
    end

    #####-------------------------------------------------------------------------------------------------------
    class XDataItem < Element

      #.....................................................................................................
      name_xmlns 'item', 'jabber:x:data'

      #.....................................................................................................
      def fields(including_hidden=false)
        fields = []
        each_element do |xe|
          if xe.kind_of?(AgentXmpp::Xmpp::XDataField) and (including_hidden or (xe.type != :hidden and xe.type != :fixed))
            fields << xe
          end
        end
        fields
      end

      #.....................................................................................................
      def add_field_with_value(var, value)
        field = XDataField.new(var)        
        field.values = value
        self << field
      end

    #### XDataItem
    end 

  #### XMPP
  end

#### AgentXmpp
end
