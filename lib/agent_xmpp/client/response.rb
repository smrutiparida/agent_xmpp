##############################################################################################################
def Send(msg, &blk)
  AgentXmpp::Response.new(msg, &blk)
end

##############################################################################################################
module AgentXmpp
    
  #####-------------------------------------------------------------------------------------------------------
  class Response

    #.........................................................................................................
    attr_reader :text, :message, :responds_with

    #.........................................................................................................
    def initialize(msg, &blk)
      @message = msg
      @text = msg.to_s
      @responds_with = blk
    end

    #.........................................................................................................
    def to_s
      text
    end
    
    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      text.send(meth, *args, &blk)
    end

  #### Response
  end

  #####-------------------------------------------------------------------------------------------------------
  class Error

    #.........................................................................................................
    attr_reader :error, :args

    #.........................................................................................................
    def initialize(error, *args)
      @error = error.to_sym
      @args = args
    end

    #.........................................................................................................
    def responce
      Xmpp::ErrorResponse.send(error, *args)
    end

    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      message.send(meth, *args, &blk)
    end

  #### Error
  end

  #####-------------------------------------------------------------------------------------------------------
  class Delegate

    #.........................................................................................................
    attr_reader :methods

    #.........................................................................................................
    def initialize
      @methods = []
    end
    
    #.........................................................................................................
    def add_delegate_methods(methods)
      @methods << methods
    end

    #.........................................................................................................
    def delegate(pipe, delegate)
      methods.each do |meths|
        meths.each do |(meth,blk)|
          delegate.define_meta_class_method(meth) do |*args|
            if res = blk.call(*args)
              pipe.send_resp(res)             
              pipe.remove_delegate(delegate)
            end
          end
        end
        pipe.add_delegate(delegate)
      end
      methods.clear
    end

    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      methods.send(meth, *args, &blk)
    end

  #### Error
  end


#### AgentXmpp
end
