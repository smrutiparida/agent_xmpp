##############################################################################################################
def Send(msg, &blk)
  AgentXmpp::Response.new(msg, &blk)
end

##############################################################################################################
module AgentXmpp
    
  #####-------------------------------------------------------------------------------------------------------
  class Response

    #.........................................................................................................
    attr_reader :text, :message, :responds_with

    #.........................................................................................................
    def initialize(msg, &blk)
      @message = msg
      @text = msg.to_s
      @responds_with = blk
    end

    #.........................................................................................................
    def to_s
      text
    end
    
    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      text.send(meth, *args, &blk)
    end

  #### Response
  end

  #####-------------------------------------------------------------------------------------------------------
  class Error

    #.........................................................................................................
    attr_reader :error, :args

    #.........................................................................................................
    def initialize(error, *args)
      @error = error.to_sym
      @args = args
    end

    #.........................................................................................................
    def send
      Xmpp::ErrorResponse.send(error, *args)
    end

    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      message.send(meth, *args, &blk)
    end

  #### Error
  end

  #####-------------------------------------------------------------------------------------------------------
  class Defer

    #.........................................................................................................
    attr_reader :methods

    #.........................................................................................................
    def initialize
      @methods = {}
    end
    
    #.........................................................................................................
    def add_defered_method(method, &blk)
      @methods[method.to_sym] = blk
    end

    #.........................................................................................................
    def delegate(pipe, delegate)
      methods.each do |m,b|
        delegate.define_meta_class_method(m) do
          pipe.send_resp(b.call)
          pipe.remove_delegate(delegate)
        end
      end
      pipe.add_delegate(delegate)
    end

    #.........................................................................................................
    def method_missing(meth, *args, &blk)
      method.send(meth, *args, &blk)
    end

  #### Error
  end


#### AgentXmpp
end
