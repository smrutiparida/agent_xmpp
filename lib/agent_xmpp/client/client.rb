##############################################################################################################
module AgentXmpp
  
  #####-------------------------------------------------------------------------------------------------------
  class Client

    #---------------------------------------------------------------------------------------------------------
    attr_reader :port, :password, :connection, :pipe
    attr_accessor :jid
    #---------------------------------------------------------------------------------------------------------

    #.........................................................................................................
    def initialize(config)
      @password = config['password']
      @port = config['port'] || 5222
      resource = config['resource'] || Socket.gethostname
      @jid = Xmpp::JID.new("#{config['jid']}/#{resource}")
      @pipe = MessagePipe.new(self, config)
    end

    #.........................................................................................................
    def connect
      while (true)
        EventMachine.run do
          @connection = EventMachine.connect(jid.domain, port, Connection, self, jid, password, pipe, port)
        end
        Boot.call_if_implemented(:call_restarting_client, pipe)     
        sleep(10.0)
        AgentXmpp.logger.warn "RESTARTING CLIENT"
      end
    end

    #.........................................................................................................
    def close_connection
      AgentXmpp.logger.info "CLOSE CONNECTION"
      connection.close_connection_after_writing unless connection.nil?
    end

    #.........................................................................................................
    def reconnect
      AgentXmpp.logger.info "RECONNECTING"
      connection.reconnect(jid.domain, port) unless connection.nil?
    end

    #.........................................................................................................
    def add_delegate(delegate)
      pipe.add_delegate(delegate)
    end

    #.........................................................................................................
    def remove_delegate(delegate)
      pipe.remove_delegate(delegate)
    end
    
    #---------------------------------------------------------------------------------------------------------
    # AgentXmpp::Connection delegate
    #.........................................................................................................
    # connection
    #.........................................................................................................
    def did_connect(pipe)
    end

    #.........................................................................................................
    def did_disconnect(pipe)
    end

    #.........................................................................................................
    def did_not_connect(pipe)
    end

    #.........................................................................................................
    # authentication
    #.........................................................................................................
    def did_authenticate(pipe, stanza)
    end
 
    #.........................................................................................................
    def did_not_authenticate(pipe, stanza)
    end

    #.........................................................................................................
    def did_bind(pipe, stanza)
    end

    #.........................................................................................................
    def did_start_session(pipe, stanza)
    end

    #.........................................................................................................
    # presence
    #.........................................................................................................
    def did_receive_presence(pipe, presence)
    end

    #.........................................................................................................
    def did_receive_presence_subscribe(pipe, presence)
    end

    #.........................................................................................................
    def did_receive_presence_unsubscribed(pipe, presence)
    end

    #.........................................................................................................
    def did_receive_presence_subscribed(pipe, presence)
    end

    #.........................................................................................................
    # roster management
    #.........................................................................................................
    def did_receive_roster_item(pipe, roster_item)
    end

    #.........................................................................................................
    def did_remove_roster_item(pipe, roster_item)
    end

    #.........................................................................................................
    def did_receive_all_roster_items(pipe)
    end

    #.........................................................................................................
    def did_acknowledge_add_roster_item(pipe, response, roster_item_jid)
    end

    #.........................................................................................................
    def did_acknowledge_remove_roster_item(pipe, response, roster_item_jid)
    end

    #.........................................................................................................
    def did_receive_remove_roster_item_error(pipe, response, roster_item_jid)
    end

    #.........................................................................................................
    def did_receive_add_roster_item_error(pipe, response, roster_item_jid)
    end

    #.........................................................................................................
    # service discovery management
    #.........................................................................................................
    def did_receive_version_result(pipe, from, version)
    end

    #.........................................................................................................
    def did_receive_version_get(pipe, request)
    end

  #### Client
  end

#### AgentXmpp
end
