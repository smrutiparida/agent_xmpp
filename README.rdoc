= Agent XMPP

Agent XMPP is a simple DSL for writing XMPP bots that respond to Ad-Hoc Commands.
Ad-Hoc Commands are described in XMPP extension XEP-0050 (see http://xmpp.org/extensions/xep-0050.html).

    # mybot.rb
    require 'rubygems'
    require 'agent_xmpp'

    execute 'hello' do
      'Hello World' 
    end

Specify the agent Jabber ID (JID), password and roster in agent_xmpp.yml.

    jid: mybot@nowhere.com
    password: pass
    roster:
        - you@home.com
        - someone@somewhere.com

Install the gem and run

    sudo gem install troystribling-agent_xmpp --source=http://gems.github.com
    ruby mybot.rb

Request and response payloads use the jabber:x:data protocol described in XMPP extension 
XEP-0004 (see http://xmpp.org/extensions/xep-0004.html).

When first started mybot.rb will automatically send buddy requests to all contacts specified
in the agent_xmpp.yml. Accept the buddy request and send commands.

mybot.rb will respond to the request,

    <iq id='5644' to='mybot@nowhere.com/mybot-host' type='set' xmlns='jabber:client'>
        <command node='hello' action='execute' xmlns='http://jabber.org/protocol/commands'/>
    </iq>
    
with

    <iq from='mybot@nowhere.com/mybot-host' to='you@home.com/your-host' id='5644' type='result' xmlns='jabber:client'>
        <command node='scalar' action='completed' xmlns='http://jabber.org/protocol/commands'>
            <x type='result' xmlns='jabber:x:data'>
                <field><value>Hello World</value></field>
            </x>
        </command>
    </iq>    

== Response Payloads

Agent XMPP supports mapping scalar, arrays and hashes to jabber:x:data payloads

    execute 'scalar' do
      'scalar' 
    end

    execute 'hash' do
      {:attr1 => 'val1', :attr2 => 'val2'}
    end

    execute 'scalar_array' do
      ['val1', 'val2','val3', 'val4'] 
    end

    execute 'hash_array' do
      {:attr1 => ['val11', 'val11'], :attr2 => 'val12'}
    end

    execute 'array_hash' do
      [{:attr1 => 'val11', :attr2 => 'val12'}, 
       {:attr1 => 'val21', :attr2 => 'val22'}, 
       {:attr1 => 'val31', :attr2 => 'val32'}]
    end

    execute 'array_hash_array' do
      [{:attr1 => ['val11', 'val11'], :attr2 => 'val12'}, 
       {:attr1 => ['val21', 'val21'], :attr2 => 'val22'}, 
       {:attr1 => ['val31', 'val31'], :attr2 => 'val32'}]
    end

== Application Startup Callbacks

Startup callback methods are available to applications and should be placed in boot.rb

    AgentXmpp::Boot.before_start do
    end

    AgentXmpp::Boot.after_connected do |pipe|
    end

    AgentXmpp::Boot.restarting_client do |pipe|
    end

== Logging

By default log messages are written to STDOUT. A log file can be specified with the -l option.

    ruby mybot.rb -l file.log

The logger can be accessed and configured.

    AgentXmpp.logger.level = Logger::WARN 

== Message Processing Callbacks

Message processing callbacks are available to applications and should be implemented in a delegate module. 

    AgentXmpp::Boot.after_connected do |pipe|
      pipe.add_delegate(YourDelegate)
    end

The available callback methods are,

=== Connection

    def did_connect(pipe)
    end

    def did_disconnect(pipe)
    end

    def did_not_connect(pipe)
    end

=== Authentication

    def did_authenticate(pipe, stanza)
    end

    def did_not_authenticate(pipe, stanza)
    end

    def did_bind(pipe, stanza)
    end

    def did_start_session(pipe, stanza)
    end

=== Presence

    def did_receive_presence(pipe, presence)
    end

    def did_receive_presence_subscribe(pipe, presence)
    end

    def did_receive_presence_unsubscribed(pipe, presence)
    end

    def did_receive_presence_subscribed(pipe, presence)
    end

=== Roster

    def did_receive_roster_item(pipe, roster_item)
    end

    def did_remove_roster_item(pipe, roster_item)
    end

    def did_receive_all_roster_items(pipe)
    end

    def did_acknowledge_add_roster_item(pipe, response, roster_item_jid)
    end

    def did_acknowledge_remove_roster_item(pipe, response, roster_item_jid)
    end

    def did_receive_remove_roster_item_error(pipe, response, roster_item_jid)
    end

    def did_receive_add_roster_item_error(pipe, response, roster_item_jid)
    end

=== Service Discovery

    def did_receive_version_result(pipe, from, version)
    end

    def did_receive_version_get(pipe, request)
    end

== Copyright

Copyright (c) 2009 Troy Stribling. See LICENSE for details.
